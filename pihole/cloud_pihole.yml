---
- name: cloud pihole - pi in the sky
  hosts: localhost
  gather_facts: true
  become: true
  tasks:

    - name: required packages
      apt:
        pkg:
          - apache2
          - docker.io
          - libcap2-bin
          - python-pip
          - ssl-cert
        state: latest
        update_cache: yes

    - name: docker and boto python packages
      pip:
        name:
          - docker
          - boto
          - boto3
          - botocore
        executable: /usr/bin/pip
        state: latest

    - name: IP Forwarding enable/persist
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        reload: yes
        sysctl_set: yes
        sysctl_file: /etc/sysctl.conf

    - name: docker service started/enabled
      systemd:
        name: docker
        state: started
        enabled: True

    - name: various container directories
      file:
        path: /opt/cloudflared
        state: directory
      with_items:
        - /opt/cloudflared
        - /opt/pihole
        - /opt/pihole/etc
        - /opt/pihole/dnsmasq.d
        - /opt/wireguard

    - name: Cloudflared Dockerfile
      blockinfile:
        create: yes
        mode: '0644'
        path: /opt/cloudflared/Dockerfile
        block: |
          FROM arm64v8/ubuntu:bionic
          EXPOSE 53/tcp
          EXPOSE 53/udp
          RUN apt-get update && \
              apt-get install -y wget && \
              wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64 --directory-prefix=/usr/local/bin/ && \
              chmod 555 /usr/local/bin/cloudflared-linux-arm64
              ENTRYPOINT ["/usr/local/bin/cloudflared-linux-arm64", "proxy-dns","--address", "172.18.0.2", "--port", "53", "--upstream", "https://1.1.1.1/dns-query", "--upstream", "https://1.0.0.1/dns-query"]

    - name: Cloudflared image
      docker_image:
        name: cloudflared_doh
        build:
          path: /opt/cloudflared
        source: build

    - name: Get SSM parameter ph_password
      set_fact:
        ph_password: "{{ lookup('aws_ssm', name_prefix + '-pihole-web-password', decrypt=True, region=aws_region) }}"

# cloud + vpn = mtu restrictions that cause failures for sites like google.com or the play store
# a lower mtu fixes the problem
    - name: cloudflared pihole and wireguard network
      docker_network:
        name: piinthesky
        driver: bridge
        driver_options:
          com.docker.network.driver.mtu: 1380
        ipam_config:
          - subnet: 172.18.0.0/24
            gateway: 172.18.0.1

    - name: cloudflared_doh container
      docker_container:
        name: cloudflared_doh
        image: cloudflared_doh
        networks:
          - name: piinthesky
            ipv4_address: "172.18.0.2"
        purge_networks: yes
        restart_policy: "always"

    - name: pihole container
      docker_container:
        name: pihole
        env:
          DNS1: 172.18.0.2
          DNS2: 172.18.0.2
          WEBPASSWORD: "{{ ph_password }}"
        image: pihole/pihole:latest
        networks:
          - name: piinthesky
            ipv4_address: "172.18.0.3"
        ports:
          - "8001:80"
        volumes:
          - /opt/pihole/etc:/etc/pihole/:rw
          - /opt/pihole/dnsmasq.d:/etc/dnsmasq.d:rw
        purge_networks: yes
        restart_policy: "always"

    - name: wireguard container
      docker_container:
        name: wireguard
        capabilities:
          - NET_ADMIN
          - SYS_MODULE
        env:
          PUID: "1000"
          PGID: "1000"
          TZ: "Etc/UTC"
          SERVERURL: "auto"
          SERVERPORT: "51820"
          ALLOWEDIPS: "172.18.0.3"
          PEERS: "1"
          PEERDNS: "172.18.0.3"
          INTERNAL_SUBNET: "172.19.0.0"
        image: linuxserver/wireguard:latest
        networks:
          - name: piinthesky
            ipv4_address: "172.18.0.4"
        ports:
          - "51820:51820/udp"
        sysctls:
          net.ipv4.conf.all.src_valid_mark: 1
        volumes:
          - /opt/wireguard:/config:rw
        restart_policy: "always"
        purge_networks: yes

    - name: Enable Apache2 modules for proxy and ssl
      apache2_module:
        name: "{{ item }}"
        state: present
      with_items:
        - headers
        - proxy
        - proxy_http
        - ssl
      register: apache_modules

    - name: Apache2 proxy configuration
      template:
        src: 8001-web-proxy.conf
        dest: /etc/apache2/sites-enabled/8001-web-proxy.conf
        owner: root
        group: root
        mode: 0444
      register: proxy_conf

    - name: Apache2 enabled / restarted
      systemd:
        name: apache2
        state: restarted
        enabled: yes
      when: apache_modules.changed or proxy_conf.changed

    - name: Wait for peer1 confs (Wireguard)
      wait_for:
        path: "/opt/wireguard/peer1/{{ item }}"
        state: present
        timeout: 600
        sleep: 1
      with_items:
        - publickey-peer1
        - privatekey-peer1
        - peer1.conf
        - peer1.png

    - name: Upload peer1 confs to s3
      aws_s3:
        mode: put
        bucket: "{{ s3_bucket }}"
        object: "wireguard/{{ item }}"
        src: "/opt/wireguard/peer1/{{ item }}"
        encrypt: yes
        encryption_mode: "aws:kms"
        encryption_kms_key_id: "{{ kms_key_id }}"
      with_items:
        - publickey-peer1
        - privatekey-peer1
        - peer1.conf
        - peer1.png
